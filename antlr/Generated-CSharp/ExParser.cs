//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ex.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ExParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6;
	public const int
		RULE_p = 0, RULE_s = 1, RULE_m = 2, RULE_t = 3;
	public static readonly string[] ruleNames = {
		"p", "s", "m", "t"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'*'", "'1'", "'2'", "'3'", "'4'"
	};
	private static readonly string[] _SymbolicNames = {
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExParser.Eof, 0); }
		public PContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.EnterP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.ExitP(this);
		}
	}

	[RuleVersion(0)]
	public PContext p() {
		PContext _localctx = new PContext(Context, State);
		EnterRule(_localctx, 0, RULE_p);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			s(0);
			State = 9;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MContext m() {
			return GetRuleContext<MContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		return s(0);
	}

	private SContext s(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SContext _localctx = new SContext(Context, _parentState);
		SContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_s, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 12;
			m(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 19;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_s);
					State = 14;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 15;
					Match(T__0);
					State = 16;
					m(0);
					}
					} 
				}
				State = 21;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MContext m() {
			return GetRuleContext<MContext>(0);
		}
		public MContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.EnterM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.ExitM(this);
		}
	}

	[RuleVersion(0)]
	public MContext m() {
		return m(0);
	}

	private MContext m(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MContext _localctx = new MContext(Context, _parentState);
		MContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_m, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 23;
			t();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_m);
					State = 25;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 26;
					Match(T__1);
					State = 27;
					t();
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TContext : ParserRuleContext {
		public TContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.EnterT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExListener typedListener = listener as IExListener;
			if (typedListener != null) typedListener.ExitT(this);
		}
	}

	[RuleVersion(0)]
	public TContext t() {
		TContext _localctx = new TContext(Context, State);
		EnterRule(_localctx, 6, RULE_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return s_sempred((SContext)_localctx, predIndex);
		case 2: return m_sempred((MContext)_localctx, predIndex);
		}
		return true;
	}
	private bool s_sempred(SContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool m_sempred(MContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,6,36,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,1,1,5,1,18,8,1,10,1,12,1,21,9,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,29,8,2,10,
		2,12,2,32,9,2,1,3,1,3,1,3,0,2,2,4,4,0,2,4,6,0,1,1,0,3,6,33,0,8,1,0,0,0,
		2,11,1,0,0,0,4,22,1,0,0,0,6,33,1,0,0,0,8,9,3,2,1,0,9,10,5,0,0,1,10,1,1,
		0,0,0,11,12,6,1,-1,0,12,13,3,4,2,0,13,19,1,0,0,0,14,15,10,2,0,0,15,16,
		5,1,0,0,16,18,3,4,2,0,17,14,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,
		1,0,0,0,20,3,1,0,0,0,21,19,1,0,0,0,22,23,6,2,-1,0,23,24,3,6,3,0,24,30,
		1,0,0,0,25,26,10,2,0,0,26,27,5,2,0,0,27,29,3,6,3,0,28,25,1,0,0,0,29,32,
		1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,5,1,0,0,0,32,30,1,0,0,0,33,34,7,
		0,0,0,34,7,1,0,0,0,2,19,30
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
