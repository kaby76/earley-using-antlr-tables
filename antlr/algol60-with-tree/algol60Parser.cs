//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from algol60.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class algol60Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Array_=1, Begin_=2, Boolean_=3, Comment_=4, Do_=5, Else_=6, End_=7, False_=8, 
		For_=9, Goto_=10, If_=11, Integer_=12, Label_=13, Own_=14, Procedure_=15, 
		Real_=16, Step_=17, String_=18, Switch_=19, Then_=20, True_=21, Until_=22, 
		Value_=23, While_=24, And_=25, Assign_=26, Colon_=27, Comma_=28, Dot_=29, 
		Divide_=30, Eor_=31, Eq_=32, Equiv_=33, Exp_=34, Gt_=35, Ge_=36, Includes_=37, 
		Lb_=38, Le_=39, LP_=40, Lt_=41, Minus_=42, Mult_=43, Ne_=44, Not_=45, 
		Or_=46, Plus_=47, Rb_=48, Rp_=49, Semi_=50, Underscore_=51, ULCorner=52, 
		URCorner=53, Logical_value=54, Relational_operator=55, Comment=56, Identifier=57, 
		Unsigned_integer=58, Decimal_fraction=59, Exponential_part=60, Decimal_number=61, 
		Unsigned_number=62, String=63, WS=64;
	public const int
		RULE_empty_ = 0, RULE_integer = 1, RULE_number = 2, RULE_expression = 3, 
		RULE_variable_identifier = 4, RULE_simple_variable = 5, RULE_subscript_expression = 6, 
		RULE_subscript_list = 7, RULE_array_identifier = 8, RULE_subscripted_variable = 9, 
		RULE_variable = 10, RULE_procedure_identifier = 11, RULE_parameter_delimiter = 12, 
		RULE_actual_parameter = 13, RULE_actual_parameter_list = 14, RULE_function_designator = 15, 
		RULE_adding_operator = 16, RULE_multiplying_operator = 17, RULE_primary = 18, 
		RULE_factor = 19, RULE_term = 20, RULE_simple_arithmetic_expression = 21, 
		RULE_if_clause = 22, RULE_arithmetic_expression = 23, RULE_relation = 24, 
		RULE_boolean_primary = 25, RULE_boolean_secondary = 26, RULE_boolean_factor = 27, 
		RULE_boolean_term = 28, RULE_implication = 29, RULE_simple_boolean = 30, 
		RULE_boolean_expression = 31, RULE_label = 32, RULE_switch_identifier = 33, 
		RULE_switch_designator = 34, RULE_simple_designational_expression = 35, 
		RULE_designational_expression = 36, RULE_unlabelled_basic_statement = 37, 
		RULE_basic_statement = 38, RULE_unconditional_statement = 39, RULE_statement = 40, 
		RULE_compound_tail = 41, RULE_block_head = 42, RULE_unlabelled_compound = 43, 
		RULE_unlabelled_block = 44, RULE_compound_statement = 45, RULE_block = 46, 
		RULE_program = 47, RULE_destination = 48, RULE_left_part = 49, RULE_left_part_list = 50, 
		RULE_assignment_statement = 51, RULE_go_to_statement = 52, RULE_dummy_statement = 53, 
		RULE_if_statement = 54, RULE_conditional_statement = 55, RULE_for_list_element = 56, 
		RULE_for_list = 57, RULE_for_clause = 58, RULE_for_statement = 59, RULE_actual_parameter_part = 60, 
		RULE_procedure_statement = 61, RULE_code = 62, RULE_declaration = 63, 
		RULE_type_list = 64, RULE_type_ = 65, RULE_local_or_own = 66, RULE_type_declaration = 67, 
		RULE_lower_bound = 68, RULE_upper_bound = 69, RULE_bound_pair = 70, RULE_bound_pair_list = 71, 
		RULE_array_segment = 72, RULE_array_list = 73, RULE_array_declarer = 74, 
		RULE_array_declaration = 75, RULE_switch_list = 76, RULE_switch_declaration = 77, 
		RULE_formal_parameter = 78, RULE_formal_parameter_list = 79, RULE_formal_parameter_part = 80, 
		RULE_identifier_list = 81, RULE_value_part = 82, RULE_specifier = 83, 
		RULE_specification_part = 84, RULE_procedure_heading = 85, RULE_procedure_body = 86, 
		RULE_procedure_declaration = 87;
	public static readonly string[] ruleNames = {
		"empty_", "integer", "number", "expression", "variable_identifier", "simple_variable", 
		"subscript_expression", "subscript_list", "array_identifier", "subscripted_variable", 
		"variable", "procedure_identifier", "parameter_delimiter", "actual_parameter", 
		"actual_parameter_list", "function_designator", "adding_operator", "multiplying_operator", 
		"primary", "factor", "term", "simple_arithmetic_expression", "if_clause", 
		"arithmetic_expression", "relation", "boolean_primary", "boolean_secondary", 
		"boolean_factor", "boolean_term", "implication", "simple_boolean", "boolean_expression", 
		"label", "switch_identifier", "switch_designator", "simple_designational_expression", 
		"designational_expression", "unlabelled_basic_statement", "basic_statement", 
		"unconditional_statement", "statement", "compound_tail", "block_head", 
		"unlabelled_compound", "unlabelled_block", "compound_statement", "block", 
		"program", "destination", "left_part", "left_part_list", "assignment_statement", 
		"go_to_statement", "dummy_statement", "if_statement", "conditional_statement", 
		"for_list_element", "for_list", "for_clause", "for_statement", "actual_parameter_part", 
		"procedure_statement", "code", "declaration", "type_list", "type_", "local_or_own", 
		"type_declaration", "lower_bound", "upper_bound", "bound_pair", "bound_pair_list", 
		"array_segment", "array_list", "array_declarer", "array_declaration", 
		"switch_list", "switch_declaration", "formal_parameter", "formal_parameter_list", 
		"formal_parameter_part", "identifier_list", "value_part", "specifier", 
		"specification_part", "procedure_heading", "procedure_body", "procedure_declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'array'", "'begin'", "'boolean'", "'comment'", "'do'", "'else'", 
		"'end'", "'false'", "'for'", null, "'if'", "'integer'", "'label'", "'own'", 
		"'procedure'", "'real'", "'step'", "'string'", "'switch'", "'then'", "'true'", 
		"'until'", "'value'", "'while'", null, "':='", "':'", "','", "'.'", null, 
		"'^='", "'='", "'\\u2261'", null, "'>'", null, "'\\u2283'", "'['", null, 
		"'('", "'<'", null, null, null, null, null, "'+'", "']'", "')'", "';'", 
		"'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Array_", "Begin_", "Boolean_", "Comment_", "Do_", "Else_", "End_", 
		"False_", "For_", "Goto_", "If_", "Integer_", "Label_", "Own_", "Procedure_", 
		"Real_", "Step_", "String_", "Switch_", "Then_", "True_", "Until_", "Value_", 
		"While_", "And_", "Assign_", "Colon_", "Comma_", "Dot_", "Divide_", "Eor_", 
		"Eq_", "Equiv_", "Exp_", "Gt_", "Ge_", "Includes_", "Lb_", "Le_", "LP_", 
		"Lt_", "Minus_", "Mult_", "Ne_", "Not_", "Or_", "Plus_", "Rb_", "Rp_", 
		"Semi_", "Underscore_", "ULCorner", "URCorner", "Logical_value", "Relational_operator", 
		"Comment", "Identifier", "Unsigned_integer", "Decimal_fraction", "Exponential_part", 
		"Decimal_number", "Unsigned_number", "String", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algol60.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static algol60Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public algol60Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public algol60Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Empty_Context : ParserRuleContext {
		public Empty_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterEmpty_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitEmpty_(this);
		}
	}

	[RuleVersion(0)]
	public Empty_Context empty_() {
		Empty_Context _localctx = new Empty_Context(Context, State);
		EnterRule(_localctx, 0, RULE_empty_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_integer() { return GetToken(algol60Parser.Unsigned_integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_() { return GetToken(algol60Parser.Plus_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_() { return GetToken(algol60Parser.Minus_, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 2, RULE_integer);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Unsigned_integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(Unsigned_integer);
				}
				break;
			case Plus_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				Match(Plus_);
				State = 180;
				Match(Unsigned_integer);
				}
				break;
			case Minus_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				Match(Minus_);
				State = 182;
				Match(Unsigned_integer);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_number() { return GetToken(algol60Parser.Unsigned_number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_() { return GetToken(algol60Parser.Plus_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_() { return GetToken(algol60Parser.Minus_, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_number);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Unsigned_number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				Match(Unsigned_number);
				}
				break;
			case Plus_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				Match(Plus_);
				State = 187;
				Match(Unsigned_number);
				}
				break;
			case Minus_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				Match(Minus_);
				State = 189;
				Match(Unsigned_number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Designational_expressionContext designational_expression() {
			return GetRuleContext<Designational_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				arithmetic_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				boolean_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				designational_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Simple_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSimple_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSimple_variable(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variableContext simple_variable() {
		Simple_variableContext _localctx = new Simple_variableContext(Context, State);
		EnterRule(_localctx, 10, RULE_simple_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Subscript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSubscript_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSubscript_expression(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_expressionContext subscript_expression() {
		Subscript_expressionContext _localctx = new Subscript_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_subscript_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			arithmetic_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_expressionContext subscript_expression() {
			return GetRuleContext<Subscript_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_listContext subscript_list() {
			return GetRuleContext<Subscript_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public Subscript_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSubscript_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSubscript_list(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_listContext subscript_list() {
		return subscript_list(0);
	}

	private Subscript_listContext subscript_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Subscript_listContext _localctx = new Subscript_listContext(Context, _parentState);
		Subscript_listContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_subscript_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 204;
			subscript_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Subscript_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_subscript_list);
					State = 206;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 207;
					Match(Comma_);
					State = 208;
					subscript_expression();
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		public Array_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArray_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArray_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Array_identifierContext array_identifier() {
		Array_identifierContext _localctx = new Array_identifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_array_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscripted_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_identifierContext array_identifier() {
			return GetRuleContext<Array_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lb_() { return GetToken(algol60Parser.Lb_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_listContext subscript_list() {
			return GetRuleContext<Subscript_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rb_() { return GetToken(algol60Parser.Rb_, 0); }
		public Subscripted_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripted_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSubscripted_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSubscripted_variable(this);
		}
	}

	[RuleVersion(0)]
	public Subscripted_variableContext subscripted_variable() {
		Subscripted_variableContext _localctx = new Subscripted_variableContext(Context, State);
		EnterRule(_localctx, 18, RULE_subscripted_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			array_identifier();
			State = 217;
			Match(Lb_);
			State = 218;
			subscript_list(0);
			State = 219;
			Match(Rb_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_variableContext simple_variable() {
			return GetRuleContext<Simple_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscripted_variableContext subscripted_variable() {
			return GetRuleContext<Subscripted_variableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				simple_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				subscripted_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		public Procedure_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProcedure_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProcedure_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_identifierContext procedure_identifier() {
		Procedure_identifierContext _localctx = new Procedure_identifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedure_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_delimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		public Parameter_delimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterParameter_delimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitParameter_delimiter(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_delimiterContext parameter_delimiter() {
		Parameter_delimiterContext _localctx = new Parameter_delimiterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter_delimiter);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				Match(Comma_);
				}
				break;
			case Rp_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(Rp_);
				State = 229;
				Match(Identifier);
				State = 230;
				Match(Colon_);
				State = 231;
				Match(LP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(algol60Parser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_identifierContext array_identifier() {
			return GetRuleContext<Array_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_identifierContext switch_identifier() {
			return GetRuleContext<Switch_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		public Actual_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterActual_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitActual_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Actual_parameterContext actual_parameter() {
		Actual_parameterContext _localctx = new Actual_parameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_actual_parameter);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				Match(String);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				array_identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				switch_identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238;
				procedure_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameterContext actual_parameter() {
			return GetRuleContext<Actual_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_listContext actual_parameter_list() {
			return GetRuleContext<Actual_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_delimiterContext parameter_delimiter() {
			return GetRuleContext<Parameter_delimiterContext>(0);
		}
		public Actual_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterActual_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitActual_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Actual_parameter_listContext actual_parameter_list() {
		return actual_parameter_list(0);
	}

	private Actual_parameter_listContext actual_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Actual_parameter_listContext _localctx = new Actual_parameter_listContext(Context, _parentState);
		Actual_parameter_listContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_actual_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 242;
			actual_parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Actual_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_actual_parameter_list);
					State = 244;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 245;
					parameter_delimiter();
					State = 246;
					actual_parameter();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_partContext actual_parameter_part() {
			return GetRuleContext<Actual_parameter_partContext>(0);
		}
		public Function_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFunction_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFunction_designator(this);
		}
	}

	[RuleVersion(0)]
	public Function_designatorContext function_designator() {
		Function_designatorContext _localctx = new Function_designatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_function_designator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			procedure_identifier();
			State = 254;
			actual_parameter_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Adding_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_() { return GetToken(algol60Parser.Plus_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_() { return GetToken(algol60Parser.Minus_, 0); }
		public Adding_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adding_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterAdding_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitAdding_operator(this);
		}
	}

	[RuleVersion(0)]
	public Adding_operatorContext adding_operator() {
		Adding_operatorContext _localctx = new Adding_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_adding_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = TokenStream.LA(1);
			if ( !(_la==Minus_ || _la==Plus_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplying_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult_() { return GetToken(algol60Parser.Mult_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide_() { return GetToken(algol60Parser.Divide_, 0); }
		public Multiplying_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplying_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterMultiplying_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitMultiplying_operator(this);
		}
	}

	[RuleVersion(0)]
	public Multiplying_operatorContext multiplying_operator() {
		Multiplying_operatorContext _localctx = new Multiplying_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_multiplying_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(_la==Divide_ || _la==Mult_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_number() { return GetToken(algol60Parser.Unsigned_number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_designatorContext function_designator() {
			return GetRuleContext<Function_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_primary);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(Unsigned_number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262;
				function_designator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 263;
				Match(LP_);
				State = 264;
				arithmetic_expression();
				State = 265;
				Match(Rp_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exp_() { return GetToken(algol60Parser.Exp_, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(Context, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 270;
			primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 272;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 273;
					Match(Exp_);
					State = 274;
					primary();
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_operatorContext multiplying_operator() {
			return GetRuleContext<Multiplying_operatorContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 281;
			factor(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 283;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 284;
					multiplying_operator();
					State = 285;
					factor(0);
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Simple_arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Adding_operatorContext adding_operator() {
			return GetRuleContext<Adding_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_arithmetic_expressionContext simple_arithmetic_expression() {
			return GetRuleContext<Simple_arithmetic_expressionContext>(0);
		}
		public Simple_arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSimple_arithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSimple_arithmetic_expression(this);
		}
	}

	[RuleVersion(0)]
	public Simple_arithmetic_expressionContext simple_arithmetic_expression() {
		return simple_arithmetic_expression(0);
	}

	private Simple_arithmetic_expressionContext simple_arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Simple_arithmetic_expressionContext _localctx = new Simple_arithmetic_expressionContext(Context, _parentState);
		Simple_arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_simple_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP_:
			case Identifier:
			case Unsigned_number:
				{
				State = 293;
				term(0);
				}
				break;
			case Minus_:
			case Plus_:
				{
				State = 294;
				adding_operator();
				State = 295;
				term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Simple_arithmetic_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_simple_arithmetic_expression);
					State = 299;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 300;
					adding_operator();
					State = 301;
					term(0);
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If_() { return GetToken(algol60Parser.If_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then_() { return GetToken(algol60Parser.Then_, 0); }
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(If_);
			State = 309;
			boolean_expression();
			State = 310;
			Match(Then_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_arithmetic_expressionContext simple_arithmetic_expression() {
			return GetRuleContext<Simple_arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else_() { return GetToken(algol60Parser.Else_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArithmetic_expression(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_arithmetic_expression);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP_:
			case Minus_:
			case Plus_:
			case Identifier:
			case Unsigned_number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				simple_arithmetic_expression(0);
				}
				break;
			case If_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				if_clause();
				State = 314;
				simple_arithmetic_expression(0);
				State = 315;
				Match(Else_);
				State = 316;
				arithmetic_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_arithmetic_expressionContext[] simple_arithmetic_expression() {
			return GetRuleContexts<Simple_arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_arithmetic_expressionContext simple_arithmetic_expression(int i) {
			return GetRuleContext<Simple_arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Relational_operator() { return GetToken(algol60Parser.Relational_operator, 0); }
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 48, RULE_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			simple_arithmetic_expression(0);
			State = 321;
			Match(Relational_operator);
			State = 322;
			simple_arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Logical_value() { return GetToken(algol60Parser.Logical_value, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_designatorContext function_designator() {
			return GetRuleContext<Function_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBoolean_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBoolean_primary(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_primaryContext boolean_primary() {
		Boolean_primaryContext _localctx = new Boolean_primaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_boolean_primary);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				Match(Logical_value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326;
				function_designator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 327;
				relation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 328;
				Match(LP_);
				State = 329;
				boolean_expression();
				State = 330;
				Match(Rp_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_secondaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_primaryContext boolean_primary() {
			return GetRuleContext<Boolean_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not_() { return GetToken(algol60Parser.Not_, 0); }
		public Boolean_secondaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_secondary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBoolean_secondary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBoolean_secondary(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_secondaryContext boolean_secondary() {
		Boolean_secondaryContext _localctx = new Boolean_secondaryContext(Context, State);
		EnterRule(_localctx, 52, RULE_boolean_secondary);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP_:
			case Minus_:
			case Plus_:
			case Logical_value:
			case Identifier:
			case Unsigned_number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				boolean_primary();
				}
				break;
			case Not_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				Match(Not_);
				State = 336;
				boolean_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_secondaryContext boolean_secondary() {
			return GetRuleContext<Boolean_secondaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_factorContext boolean_factor() {
			return GetRuleContext<Boolean_factorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And_() { return GetToken(algol60Parser.And_, 0); }
		public Boolean_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBoolean_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBoolean_factor(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_factorContext boolean_factor() {
		return boolean_factor(0);
	}

	private Boolean_factorContext boolean_factor(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Boolean_factorContext _localctx = new Boolean_factorContext(Context, _parentState);
		Boolean_factorContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_boolean_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 340;
			boolean_secondary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_factorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean_factor);
					State = 342;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 343;
					Match(And_);
					State = 344;
					boolean_secondary();
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Boolean_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_factorContext boolean_factor() {
			return GetRuleContext<Boolean_factorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_termContext boolean_term() {
			return GetRuleContext<Boolean_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or_() { return GetToken(algol60Parser.Or_, 0); }
		public Boolean_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBoolean_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBoolean_term(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_termContext boolean_term() {
		return boolean_term(0);
	}

	private Boolean_termContext boolean_term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Boolean_termContext _localctx = new Boolean_termContext(Context, _parentState);
		Boolean_termContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_boolean_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 351;
			boolean_factor(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_termContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean_term);
					State = 353;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 354;
					Match(Or_);
					State = 355;
					boolean_factor(0);
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ImplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_termContext boolean_term() {
			return GetRuleContext<Boolean_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicationContext implication() {
			return GetRuleContext<ImplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes_() { return GetToken(algol60Parser.Includes_, 0); }
		public ImplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterImplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitImplication(this);
		}
	}

	[RuleVersion(0)]
	public ImplicationContext implication() {
		return implication(0);
	}

	private ImplicationContext implication(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ImplicationContext _localctx = new ImplicationContext(Context, _parentState);
		ImplicationContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_implication, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 362;
			boolean_term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ImplicationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_implication);
					State = 364;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 365;
					Match(Includes_);
					State = 366;
					boolean_term(0);
					}
					} 
				}
				State = 371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Simple_booleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicationContext implication() {
			return GetRuleContext<ImplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_booleanContext simple_boolean() {
			return GetRuleContext<Simple_booleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equiv_() { return GetToken(algol60Parser.Equiv_, 0); }
		public Simple_booleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSimple_boolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSimple_boolean(this);
		}
	}

	[RuleVersion(0)]
	public Simple_booleanContext simple_boolean() {
		return simple_boolean(0);
	}

	private Simple_booleanContext simple_boolean(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Simple_booleanContext _localctx = new Simple_booleanContext(Context, _parentState);
		Simple_booleanContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_simple_boolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 373;
			implication(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Simple_booleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_simple_boolean);
					State = 375;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 376;
					Match(Equiv_);
					State = 377;
					implication(0);
					}
					} 
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_booleanContext simple_boolean() {
			return GetRuleContext<Simple_booleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else_() { return GetToken(algol60Parser.Else_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBoolean_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBoolean_expression(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		Boolean_expressionContext _localctx = new Boolean_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolean_expression);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP_:
			case Minus_:
			case Not_:
			case Plus_:
			case Logical_value:
			case Identifier:
			case Unsigned_number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				simple_boolean(0);
				}
				break;
			case If_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				if_clause();
				State = 385;
				simple_boolean(0);
				State = 386;
				Match(Else_);
				State = 387;
				boolean_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_integer() { return GetToken(algol60Parser.Unsigned_integer, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 64, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Unsigned_integer) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		public Switch_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSwitch_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSwitch_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Switch_identifierContext switch_identifier() {
		Switch_identifierContext _localctx = new Switch_identifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_switch_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_identifierContext switch_identifier() {
			return GetRuleContext<Switch_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lb_() { return GetToken(algol60Parser.Lb_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_expressionContext subscript_expression() {
			return GetRuleContext<Subscript_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rb_() { return GetToken(algol60Parser.Rb_, 0); }
		public Switch_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSwitch_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSwitch_designator(this);
		}
	}

	[RuleVersion(0)]
	public Switch_designatorContext switch_designator() {
		Switch_designatorContext _localctx = new Switch_designatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_switch_designator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			switch_identifier();
			State = 396;
			Match(Lb_);
			State = 397;
			subscript_expression();
			State = 398;
			Match(Rb_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_designational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_designatorContext switch_designator() {
			return GetRuleContext<Switch_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Designational_expressionContext designational_expression() {
			return GetRuleContext<Designational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		public Simple_designational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_designational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSimple_designational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSimple_designational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Simple_designational_expressionContext simple_designational_expression() {
		Simple_designational_expressionContext _localctx = new Simple_designational_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_simple_designational_expression);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				switch_designator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				Match(LP_);
				State = 403;
				designational_expression();
				State = 404;
				Match(Rp_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Designational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_designational_expressionContext simple_designational_expression() {
			return GetRuleContext<Simple_designational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else_() { return GetToken(algol60Parser.Else_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Designational_expressionContext designational_expression() {
			return GetRuleContext<Designational_expressionContext>(0);
		}
		public Designational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterDesignational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitDesignational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Designational_expressionContext designational_expression() {
		Designational_expressionContext _localctx = new Designational_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_designational_expression);
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP_:
			case Identifier:
			case Unsigned_integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				simple_designational_expression();
				}
				break;
			case If_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				if_clause();
				State = 410;
				simple_designational_expression();
				State = 411;
				Match(Else_);
				State = 412;
				designational_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unlabelled_basic_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_to_statementContext go_to_statement() {
			return GetRuleContext<Go_to_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_statementContext dummy_statement() {
			return GetRuleContext<Dummy_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_statementContext procedure_statement() {
			return GetRuleContext<Procedure_statementContext>(0);
		}
		public Unlabelled_basic_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelled_basic_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterUnlabelled_basic_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitUnlabelled_basic_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unlabelled_basic_statementContext unlabelled_basic_statement() {
		Unlabelled_basic_statementContext _localctx = new Unlabelled_basic_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_unlabelled_basic_statement);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				assignment_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				go_to_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				dummy_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				procedure_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unlabelled_basic_statementContext unlabelled_basic_statement() {
			return GetRuleContext<Unlabelled_basic_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Basic_statementContext basic_statement() {
			return GetRuleContext<Basic_statementContext>(0);
		}
		public Basic_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBasic_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBasic_statement(this);
		}
	}

	[RuleVersion(0)]
	public Basic_statementContext basic_statement() {
		Basic_statementContext _localctx = new Basic_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_basic_statement);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				unlabelled_basic_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				label();
				State = 424;
				Match(Colon_);
				State = 425;
				basic_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unconditional_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Basic_statementContext basic_statement() {
			return GetRuleContext<Basic_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unconditional_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unconditional_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterUnconditional_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitUnconditional_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unconditional_statementContext unconditional_statement() {
		Unconditional_statementContext _localctx = new Unconditional_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_unconditional_statement);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				basic_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430;
				compound_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 431;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unconditional_statementContext unconditional_statement() {
			return GetRuleContext<Unconditional_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_statementContext conditional_statement() {
			return GetRuleContext<Conditional_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_statement);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				unconditional_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				conditional_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End_() { return GetToken(algol60Parser.End_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_tailContext compound_tail() {
			return GetRuleContext<Compound_tailContext>(0);
		}
		public Compound_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterCompound_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitCompound_tail(this);
		}
	}

	[RuleVersion(0)]
	public Compound_tailContext compound_tail() {
		Compound_tailContext _localctx = new Compound_tailContext(Context, State);
		EnterRule(_localctx, 82, RULE_compound_tail);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439;
				statement();
				State = 440;
				Match(End_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442;
				statement();
				State = 443;
				Match(Semi_);
				State = 444;
				compound_tail();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin_() { return GetToken(algol60Parser.Begin_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_headContext block_head() {
			return GetRuleContext<Block_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		public Block_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBlock_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBlock_head(this);
		}
	}

	[RuleVersion(0)]
	public Block_headContext block_head() {
		return block_head(0);
	}

	private Block_headContext block_head(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Block_headContext _localctx = new Block_headContext(Context, _parentState);
		Block_headContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_block_head, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 449;
			Match(Begin_);
			State = 450;
			declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Block_headContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_block_head);
					State = 452;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 453;
					Match(Semi_);
					State = 454;
					declaration();
					}
					} 
				}
				State = 459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unlabelled_compoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin_() { return GetToken(algol60Parser.Begin_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_tailContext compound_tail() {
			return GetRuleContext<Compound_tailContext>(0);
		}
		public Unlabelled_compoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelled_compound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterUnlabelled_compound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitUnlabelled_compound(this);
		}
	}

	[RuleVersion(0)]
	public Unlabelled_compoundContext unlabelled_compound() {
		Unlabelled_compoundContext _localctx = new Unlabelled_compoundContext(Context, State);
		EnterRule(_localctx, 86, RULE_unlabelled_compound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(Begin_);
			State = 461;
			compound_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unlabelled_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_headContext block_head() {
			return GetRuleContext<Block_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_tailContext compound_tail() {
			return GetRuleContext<Compound_tailContext>(0);
		}
		public Unlabelled_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelled_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterUnlabelled_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitUnlabelled_block(this);
		}
	}

	[RuleVersion(0)]
	public Unlabelled_blockContext unlabelled_block() {
		Unlabelled_blockContext _localctx = new Unlabelled_blockContext(Context, State);
		EnterRule(_localctx, 88, RULE_unlabelled_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			block_head(0);
			State = 464;
			Match(Semi_);
			State = 465;
			compound_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unlabelled_compoundContext unlabelled_compound() {
			return GetRuleContext<Unlabelled_compoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 90, RULE_compound_statement);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				unlabelled_compound();
				}
				break;
			case Identifier:
			case Unsigned_integer:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				label();
				State = 469;
				Match(Colon_);
				State = 470;
				compound_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unlabelled_blockContext unlabelled_block() {
			return GetRuleContext<Unlabelled_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_block);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				unlabelled_block();
				}
				break;
			case Identifier:
			case Unsigned_integer:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				label();
				State = 476;
				Match(Colon_);
				State = 477;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(algol60Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 94, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 481;
				block();
				}
				break;
			case 2:
				{
				State = 482;
				compound_statement();
				}
				break;
			}
			State = 485;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		public DestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterDestination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitDestination(this);
		}
	}

	[RuleVersion(0)]
	public DestinationContext destination() {
		DestinationContext _localctx = new DestinationContext(Context, State);
		EnterRule(_localctx, 96, RULE_destination);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				procedure_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign_() { return GetToken(algol60Parser.Assign_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		public Left_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterLeft_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitLeft_part(this);
		}
	}

	[RuleVersion(0)]
	public Left_partContext left_part() {
		Left_partContext _localctx = new Left_partContext(Context, State);
		EnterRule(_localctx, 98, RULE_left_part);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				variable();
				State = 492;
				Match(Assign_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				procedure_identifier();
				State = 495;
				Match(Assign_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_part_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Left_partContext left_part() {
			return GetRuleContext<Left_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_part_listContext left_part_list() {
			return GetRuleContext<Left_part_listContext>(0);
		}
		public Left_part_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_part_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterLeft_part_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitLeft_part_list(this);
		}
	}

	[RuleVersion(0)]
	public Left_part_listContext left_part_list() {
		return left_part_list(0);
	}

	private Left_part_listContext left_part_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Left_part_listContext _localctx = new Left_part_listContext(Context, _parentState);
		Left_part_listContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_left_part_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 500;
			left_part();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 506;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Left_part_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_left_part_list);
					State = 502;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 503;
					left_part();
					}
					} 
				}
				State = 508;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Left_part_listContext left_part_list() {
			return GetRuleContext<Left_part_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterAssignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitAssignment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 102, RULE_assignment_statement);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				left_part_list(0);
				State = 510;
				arithmetic_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512;
				left_part_list(0);
				State = 513;
				boolean_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_to_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto_() { return GetToken(algol60Parser.Goto_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Designational_expressionContext designational_expression() {
			return GetRuleContext<Designational_expressionContext>(0);
		}
		public Go_to_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_to_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterGo_to_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitGo_to_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_to_statementContext go_to_statement() {
		Go_to_statementContext _localctx = new Go_to_statementContext(Context, State);
		EnterRule(_localctx, 104, RULE_go_to_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(Goto_);
			State = 518;
			designational_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dummy_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		public Dummy_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterDummy_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitDummy_statement(this);
		}
	}

	[RuleVersion(0)]
	public Dummy_statementContext dummy_statement() {
		Dummy_statementContext _localctx = new Dummy_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_dummy_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			empty_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unconditional_statementContext unconditional_statement() {
			return GetRuleContext<Unconditional_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 108, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			if_clause();
			State = 523;
			unconditional_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else_() { return GetToken(algol60Parser.Else_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_statementContext conditional_statement() {
			return GetRuleContext<Conditional_statementContext>(0);
		}
		public Conditional_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterConditional_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitConditional_statement(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_statementContext conditional_statement() {
		Conditional_statementContext _localctx = new Conditional_statementContext(Context, State);
		EnterRule(_localctx, 110, RULE_conditional_statement);
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				if_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526;
				if_statement();
				State = 527;
				Match(Else_);
				State = 528;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 530;
				if_clause();
				State = 531;
				for_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 533;
				label();
				State = 534;
				Match(Colon_);
				State = 535;
				conditional_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_list_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step_() { return GetToken(algol60Parser.Step_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until_() { return GetToken(algol60Parser.Until_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While_() { return GetToken(algol60Parser.While_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public For_list_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_list_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFor_list_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFor_list_element(this);
		}
	}

	[RuleVersion(0)]
	public For_list_elementContext for_list_element() {
		For_list_elementContext _localctx = new For_list_elementContext(Context, State);
		EnterRule(_localctx, 112, RULE_for_list_element);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				arithmetic_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				arithmetic_expression();
				State = 541;
				Match(Step_);
				State = 542;
				arithmetic_expression();
				State = 543;
				Match(Until_);
				State = 544;
				arithmetic_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 546;
				arithmetic_expression();
				State = 547;
				Match(While_);
				State = 548;
				boolean_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_list_elementContext for_list_element() {
			return GetRuleContext<For_list_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_listContext for_list() {
			return GetRuleContext<For_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public For_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFor_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFor_list(this);
		}
	}

	[RuleVersion(0)]
	public For_listContext for_list() {
		return for_list(0);
	}

	private For_listContext for_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		For_listContext _localctx = new For_listContext(Context, _parentState);
		For_listContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_for_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 553;
			for_list_element();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 560;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new For_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_for_list);
					State = 555;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 556;
					Match(Comma_);
					State = 557;
					for_list_element();
					}
					} 
				}
				State = 562;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For_() { return GetToken(algol60Parser.For_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign_() { return GetToken(algol60Parser.Assign_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_listContext for_list() {
			return GetRuleContext<For_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do_() { return GetToken(algol60Parser.Do_, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 116, RULE_for_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(For_);
			State = 564;
			variable();
			State = 565;
			Match(Assign_);
			State = 566;
			for_list(0);
			State = 567;
			Match(Do_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_for_statement);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				for_clause();
				State = 570;
				statement();
				}
				break;
			case Identifier:
			case Unsigned_integer:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				label();
				State = 573;
				Match(Colon_);
				State = 574;
				for_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_parameter_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_listContext actual_parameter_list() {
			return GetRuleContext<Actual_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		public Actual_parameter_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_parameter_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterActual_parameter_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitActual_parameter_part(this);
		}
	}

	[RuleVersion(0)]
	public Actual_parameter_partContext actual_parameter_part() {
		Actual_parameter_partContext _localctx = new Actual_parameter_partContext(Context, State);
		EnterRule(_localctx, 120, RULE_actual_parameter_part);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				empty_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				Match(LP_);
				State = 580;
				actual_parameter_list(0);
				State = 581;
				Match(Rp_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_partContext actual_parameter_part() {
			return GetRuleContext<Actual_parameter_partContext>(0);
		}
		public Procedure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProcedure_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProcedure_statement(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_statementContext procedure_statement() {
		Procedure_statementContext _localctx = new Procedure_statementContext(Context, State);
		EnterRule(_localctx, 122, RULE_procedure_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			procedure_identifier();
			State = 586;
			actual_parameter_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 124, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 588;
					MatchWildcard();
					}
					} 
				}
				State = 593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_declarationContext array_declaration() {
			return GetRuleContext<Array_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_declarationContext switch_declaration() {
			return GetRuleContext<Switch_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_declarationContext procedure_declaration() {
			return GetRuleContext<Procedure_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_declaration);
		try {
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594;
				type_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				array_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 596;
				switch_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 597;
				procedure_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_variableContext simple_variable() {
			return GetRuleContext<Simple_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterType_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitType_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_listContext type_list() {
		Type_listContext _localctx = new Type_listContext(Context, State);
		EnterRule(_localctx, 128, RULE_type_list);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600;
				simple_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 601;
				simple_variable();
				State = 602;
				Match(Comma_);
				State = 603;
				type_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_() { return GetToken(algol60Parser.Real_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_() { return GetToken(algol60Parser.Integer_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean_() { return GetToken(algol60Parser.Boolean_, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 130, RULE_type_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 69640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_or_ownContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Own_() { return GetToken(algol60Parser.Own_, 0); }
		public Local_or_ownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_or_own; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterLocal_or_own(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitLocal_or_own(this);
		}
	}

	[RuleVersion(0)]
	public Local_or_ownContext local_or_own() {
		Local_or_ownContext _localctx = new Local_or_ownContext(Context, State);
		EnterRule(_localctx, 132, RULE_local_or_own);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Array_:
			case Boolean_:
			case Integer_:
			case Real_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				empty_();
				}
				break;
			case Own_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610;
				Match(Own_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_or_ownContext local_or_own() {
			return GetRuleContext<Local_or_ownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			local_or_own();
			State = 614;
			type_();
			State = 615;
			type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterLower_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitLower_bound(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 136, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			arithmetic_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterUpper_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitUpper_bound(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 138, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			arithmetic_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_() { return GetToken(algol60Parser.Colon_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public Bound_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBound_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBound_pair(this);
		}
	}

	[RuleVersion(0)]
	public Bound_pairContext bound_pair() {
		Bound_pairContext _localctx = new Bound_pairContext(Context, State);
		EnterRule(_localctx, 140, RULE_bound_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			lower_bound();
			State = 622;
			Match(Colon_);
			State = 623;
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bound_pair_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pairContext bound_pair() {
			return GetRuleContext<Bound_pairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pair_listContext bound_pair_list() {
			return GetRuleContext<Bound_pair_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public Bound_pair_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bound_pair_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterBound_pair_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitBound_pair_list(this);
		}
	}

	[RuleVersion(0)]
	public Bound_pair_listContext bound_pair_list() {
		return bound_pair_list(0);
	}

	private Bound_pair_listContext bound_pair_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bound_pair_listContext _localctx = new Bound_pair_listContext(Context, _parentState);
		Bound_pair_listContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_bound_pair_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 626;
			bound_pair();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bound_pair_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bound_pair_list);
					State = 628;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 629;
					Match(Comma_);
					State = 630;
					bound_pair();
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_segmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_identifierContext array_identifier() {
			return GetRuleContext<Array_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lb_() { return GetToken(algol60Parser.Lb_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bound_pair_listContext bound_pair_list() {
			return GetRuleContext<Bound_pair_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rb_() { return GetToken(algol60Parser.Rb_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_segmentContext array_segment() {
			return GetRuleContext<Array_segmentContext>(0);
		}
		public Array_segmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArray_segment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArray_segment(this);
		}
	}

	[RuleVersion(0)]
	public Array_segmentContext array_segment() {
		Array_segmentContext _localctx = new Array_segmentContext(Context, State);
		EnterRule(_localctx, 144, RULE_array_segment);
		try {
			State = 645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 636;
				array_identifier();
				State = 637;
				Match(Lb_);
				State = 638;
				bound_pair_list(0);
				State = 639;
				Match(Rb_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				array_identifier();
				State = 642;
				Match(Comma_);
				State = 643;
				array_segment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_segmentContext array_segment() {
			return GetRuleContext<Array_segmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_listContext array_list() {
			return GetRuleContext<Array_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public Array_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArray_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArray_list(this);
		}
	}

	[RuleVersion(0)]
	public Array_listContext array_list() {
		return array_list(0);
	}

	private Array_listContext array_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Array_listContext _localctx = new Array_listContext(Context, _parentState);
		Array_listContext _prevctx = _localctx;
		int _startState = 146;
		EnterRecursionRule(_localctx, 146, RULE_array_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 648;
			array_segment();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 655;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Array_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_array_list);
					State = 650;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 651;
					Match(Comma_);
					State = 652;
					array_segment();
					}
					} 
				}
				State = 657;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_declarerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Array_() { return GetToken(algol60Parser.Array_, 0); }
		public Array_declarerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declarer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArray_declarer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArray_declarer(this);
		}
	}

	[RuleVersion(0)]
	public Array_declarerContext array_declarer() {
		Array_declarerContext _localctx = new Array_declarerContext(Context, State);
		EnterRule(_localctx, 148, RULE_array_declarer);
		try {
			State = 662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Boolean_:
			case Integer_:
			case Real_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				type_();
				State = 659;
				Match(Array_);
				}
				break;
			case Array_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661;
				Match(Array_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_or_ownContext local_or_own() {
			return GetRuleContext<Local_or_ownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_declarerContext array_declarer() {
			return GetRuleContext<Array_declarerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_listContext array_list() {
			return GetRuleContext<Array_listContext>(0);
		}
		public Array_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterArray_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitArray_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Array_declarationContext array_declaration() {
		Array_declarationContext _localctx = new Array_declarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_array_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			local_or_own();
			State = 665;
			array_declarer();
			State = 666;
			array_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Designational_expressionContext designational_expression() {
			return GetRuleContext<Designational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_listContext switch_list() {
			return GetRuleContext<Switch_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public Switch_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSwitch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSwitch_list(this);
		}
	}

	[RuleVersion(0)]
	public Switch_listContext switch_list() {
		return switch_list(0);
	}

	private Switch_listContext switch_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Switch_listContext _localctx = new Switch_listContext(Context, _parentState);
		Switch_listContext _prevctx = _localctx;
		int _startState = 152;
		EnterRecursionRule(_localctx, 152, RULE_switch_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 669;
			designational_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Switch_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_switch_list);
					State = 671;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 672;
					Match(Comma_);
					State = 673;
					designational_expression();
					}
					} 
				}
				State = 678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch_() { return GetToken(algol60Parser.Switch_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_identifierContext switch_identifier() {
			return GetRuleContext<Switch_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign_() { return GetToken(algol60Parser.Assign_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_listContext switch_list() {
			return GetRuleContext<Switch_listContext>(0);
		}
		public Switch_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSwitch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSwitch_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Switch_declarationContext switch_declaration() {
		Switch_declarationContext _localctx = new Switch_declarationContext(Context, State);
		EnterRule(_localctx, 154, RULE_switch_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(Switch_);
			State = 680;
			switch_identifier();
			State = 681;
			Match(Assign_);
			State = 682;
			switch_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		public Formal_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFormal_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFormal_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameterContext formal_parameter() {
		Formal_parameterContext _localctx = new Formal_parameterContext(Context, State);
		EnterRule(_localctx, 156, RULE_formal_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameterContext formal_parameter() {
			return GetRuleContext<Formal_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_delimiterContext parameter_delimiter() {
			return GetRuleContext<Parameter_delimiterContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		return formal_parameter_list(0);
	}

	private Formal_parameter_listContext formal_parameter_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, _parentState);
		Formal_parameter_listContext _prevctx = _localctx;
		int _startState = 158;
		EnterRecursionRule(_localctx, 158, RULE_formal_parameter_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 687;
			formal_parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 695;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Formal_parameter_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_formal_parameter_list);
					State = 689;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 690;
					parameter_delimiter();
					State = 691;
					formal_parameter();
					}
					} 
				}
				State = 697;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Formal_parameter_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP_() { return GetToken(algol60Parser.LP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rp_() { return GetToken(algol60Parser.Rp_, 0); }
		public Formal_parameter_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterFormal_parameter_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitFormal_parameter_part(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_partContext formal_parameter_part() {
		Formal_parameter_partContext _localctx = new Formal_parameter_partContext(Context, State);
		EnterRule(_localctx, 160, RULE_formal_parameter_part);
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semi_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698;
				empty_();
				}
				break;
			case LP_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 699;
				Match(LP_);
				State = 700;
				formal_parameter_list(0);
				State = 701;
				Match(Rp_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(algol60Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma_() { return GetToken(algol60Parser.Comma_, 0); }
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		return identifier_list(0);
	}

	private Identifier_listContext identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Identifier_listContext _localctx = new Identifier_listContext(Context, _parentState);
		Identifier_listContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 706;
			Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 713;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Identifier_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifier_list);
					State = 708;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 709;
					Match(Comma_);
					State = 710;
					Match(Identifier);
					}
					} 
				}
				State = 715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Value_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value_() { return GetToken(algol60Parser.Value_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		public Value_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterValue_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitValue_part(this);
		}
	}

	[RuleVersion(0)]
	public Value_partContext value_part() {
		Value_partContext _localctx = new Value_partContext(Context, State);
		EnterRule(_localctx, 164, RULE_value_part);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716;
				Match(Value_);
				State = 717;
				identifier_list(0);
				State = 718;
				Match(Semi_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720;
				empty_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(algol60Parser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Array_() { return GetToken(algol60Parser.Array_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Label_() { return GetToken(algol60Parser.Label_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch_() { return GetToken(algol60Parser.Switch_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Procedure_() { return GetToken(algol60Parser.Procedure_, 0); }
		public SpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierContext specifier() {
		SpecifierContext _localctx = new SpecifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_specifier);
		try {
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				Match(String_);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				type_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725;
				Match(Array_);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 726;
				type_();
				State = 727;
				Match(Array_);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				Match(Label_);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 730;
				Match(Switch_);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 731;
				Match(Procedure_);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 732;
				type_();
				State = 733;
				Match(Procedure_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specification_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Empty_Context empty_() {
			return GetRuleContext<Empty_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierContext specifier() {
			return GetRuleContext<SpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		public Specification_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterSpecification_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitSpecification_part(this);
		}
	}

	[RuleVersion(0)]
	public Specification_partContext specification_part() {
		return specification_part(0);
	}

	private Specification_partContext specification_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Specification_partContext _localctx = new Specification_partContext(Context, _parentState);
		Specification_partContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_specification_part, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 738;
				empty_();
				}
				break;
			case 2:
				{
				State = 739;
				specifier();
				State = 740;
				identifier_list(0);
				State = 741;
				Match(Semi_);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 751;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Specification_partContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_specification_part);
					State = 745;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 746;
					specifier();
					State = 747;
					identifier_list(0);
					}
					} 
				}
				State = 753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Procedure_headingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_identifierContext procedure_identifier() {
			return GetRuleContext<Procedure_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_partContext formal_parameter_part() {
			return GetRuleContext<Formal_parameter_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi_() { return GetToken(algol60Parser.Semi_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_partContext value_part() {
			return GetRuleContext<Value_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		public Procedure_headingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_heading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProcedure_heading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProcedure_heading(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_headingContext procedure_heading() {
		Procedure_headingContext _localctx = new Procedure_headingContext(Context, State);
		EnterRule(_localctx, 170, RULE_procedure_heading);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			procedure_identifier();
			State = 755;
			formal_parameter_part();
			State = 756;
			Match(Semi_);
			State = 757;
			value_part();
			State = 758;
			specification_part(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProcedure_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProcedure_body(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_bodyContext procedure_body() {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(Context, State);
		EnterRule(_localctx, 172, RULE_procedure_body);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				code();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Procedure_() { return GetToken(algol60Parser.Procedure_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_headingContext procedure_heading() {
			return GetRuleContext<Procedure_headingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Procedure_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.EnterProcedure_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ialgol60Listener typedListener = listener as Ialgol60Listener;
			if (typedListener != null) typedListener.ExitProcedure_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_declarationContext procedure_declaration() {
		Procedure_declarationContext _localctx = new Procedure_declarationContext(Context, State);
		EnterRule(_localctx, 174, RULE_procedure_declaration);
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Procedure_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764;
				Match(Procedure_);
				State = 765;
				procedure_heading();
				State = 766;
				procedure_body();
				}
				break;
			case Boolean_:
			case Integer_:
			case Real_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				type_();
				State = 769;
				Match(Procedure_);
				State = 770;
				procedure_heading();
				State = 771;
				procedure_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return subscript_list_sempred((Subscript_listContext)_localctx, predIndex);
		case 14: return actual_parameter_list_sempred((Actual_parameter_listContext)_localctx, predIndex);
		case 19: return factor_sempred((FactorContext)_localctx, predIndex);
		case 20: return term_sempred((TermContext)_localctx, predIndex);
		case 21: return simple_arithmetic_expression_sempred((Simple_arithmetic_expressionContext)_localctx, predIndex);
		case 27: return boolean_factor_sempred((Boolean_factorContext)_localctx, predIndex);
		case 28: return boolean_term_sempred((Boolean_termContext)_localctx, predIndex);
		case 29: return implication_sempred((ImplicationContext)_localctx, predIndex);
		case 30: return simple_boolean_sempred((Simple_booleanContext)_localctx, predIndex);
		case 42: return block_head_sempred((Block_headContext)_localctx, predIndex);
		case 50: return left_part_list_sempred((Left_part_listContext)_localctx, predIndex);
		case 57: return for_list_sempred((For_listContext)_localctx, predIndex);
		case 71: return bound_pair_list_sempred((Bound_pair_listContext)_localctx, predIndex);
		case 73: return array_list_sempred((Array_listContext)_localctx, predIndex);
		case 76: return switch_list_sempred((Switch_listContext)_localctx, predIndex);
		case 79: return formal_parameter_list_sempred((Formal_parameter_listContext)_localctx, predIndex);
		case 81: return identifier_list_sempred((Identifier_listContext)_localctx, predIndex);
		case 84: return specification_part_sempred((Specification_partContext)_localctx, predIndex);
		}
		return true;
	}
	private bool subscript_list_sempred(Subscript_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool actual_parameter_list_sempred(Actual_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simple_arithmetic_expression_sempred(Simple_arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolean_factor_sempred(Boolean_factorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolean_term_sempred(Boolean_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool implication_sempred(ImplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simple_boolean_sempred(Simple_booleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool block_head_sempred(Block_headContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool left_part_list_sempred(Left_part_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool for_list_sempred(For_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bound_pair_list_sempred(Bound_pair_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool array_list_sempred(Array_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool switch_list_sempred(Switch_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool formal_parameter_list_sempred(Formal_parameter_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool identifier_list_sempred(Identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool specification_part_sempred(Specification_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,776,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,184,8,1,
		1,2,1,2,1,2,1,2,1,2,3,2,191,8,2,1,3,1,3,1,3,3,3,196,8,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,210,8,7,10,7,12,7,213,9,7,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,3,10,224,8,10,1,11,1,11,1,12,1,12,1,12,
		1,12,1,12,3,12,233,8,12,1,13,1,13,1,13,1,13,1,13,3,13,240,8,13,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,5,14,249,8,14,10,14,12,14,252,9,14,1,15,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,268,
		8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,276,8,19,10,19,12,19,279,9,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,288,8,20,10,20,12,20,291,9,20,
		1,21,1,21,1,21,1,21,1,21,3,21,298,8,21,1,21,1,21,1,21,1,21,5,21,304,8,
		21,10,21,12,21,307,9,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
		23,3,23,319,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,3,25,333,8,25,1,26,1,26,1,26,3,26,338,8,26,1,27,1,27,1,27,1,27,1,
		27,1,27,5,27,346,8,27,10,27,12,27,349,9,27,1,28,1,28,1,28,1,28,1,28,1,
		28,5,28,357,8,28,10,28,12,28,360,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,
		29,368,8,29,10,29,12,29,371,9,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,379,
		8,30,10,30,12,30,382,9,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,390,8,31,
		1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
		1,35,3,35,407,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,415,8,36,1,37,1,
		37,1,37,1,37,3,37,421,8,37,1,38,1,38,1,38,1,38,1,38,3,38,428,8,38,1,39,
		1,39,1,39,3,39,433,8,39,1,40,1,40,1,40,3,40,438,8,40,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,3,41,447,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,
		456,8,42,10,42,12,42,459,9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,
		1,45,1,45,1,45,1,45,3,45,473,8,45,1,46,1,46,1,46,1,46,1,46,3,46,480,8,
		46,1,47,1,47,3,47,484,8,47,1,47,1,47,1,48,1,48,3,48,490,8,48,1,49,1,49,
		1,49,1,49,1,49,1,49,3,49,498,8,49,1,50,1,50,1,50,1,50,1,50,5,50,505,8,
		50,10,50,12,50,508,9,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,516,8,51,1,
		52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,1,55,3,55,538,8,55,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,3,56,551,8,56,1,57,1,57,1,57,1,57,1,57,1,57,5,
		57,559,8,57,10,57,12,57,562,9,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,
		59,1,59,1,59,1,59,1,59,1,59,3,59,577,8,59,1,60,1,60,1,60,1,60,1,60,3,60,
		584,8,60,1,61,1,61,1,61,1,62,5,62,590,8,62,10,62,12,62,593,9,62,1,63,1,
		63,1,63,1,63,3,63,599,8,63,1,64,1,64,1,64,1,64,1,64,3,64,606,8,64,1,65,
		1,65,1,66,1,66,3,66,612,8,66,1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,
		70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,5,71,632,8,71,10,71,12,
		71,635,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,646,8,72,
		1,73,1,73,1,73,1,73,1,73,1,73,5,73,654,8,73,10,73,12,73,657,9,73,1,74,
		1,74,1,74,1,74,3,74,663,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,
		76,1,76,5,76,675,8,76,10,76,12,76,678,9,76,1,77,1,77,1,77,1,77,1,77,1,
		78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,694,8,79,10,79,12,79,697,
		9,79,1,80,1,80,1,80,1,80,1,80,3,80,704,8,80,1,81,1,81,1,81,1,81,1,81,1,
		81,5,81,712,8,81,10,81,12,81,715,9,81,1,82,1,82,1,82,1,82,1,82,3,82,722,
		8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
		736,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,744,8,84,1,84,1,84,1,84,1,
		84,5,84,750,8,84,10,84,12,84,753,9,84,1,85,1,85,1,85,1,85,1,85,1,85,1,
		86,1,86,3,86,763,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,
		774,8,87,1,87,0,18,14,28,38,40,42,54,56,58,60,84,100,114,142,146,152,158,
		162,168,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
		130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
		166,168,170,172,174,0,4,2,0,42,42,47,47,2,0,30,30,43,43,1,0,57,58,3,0,
		3,3,12,12,16,16,773,0,176,1,0,0,0,2,183,1,0,0,0,4,190,1,0,0,0,6,195,1,
		0,0,0,8,197,1,0,0,0,10,199,1,0,0,0,12,201,1,0,0,0,14,203,1,0,0,0,16,214,
		1,0,0,0,18,216,1,0,0,0,20,223,1,0,0,0,22,225,1,0,0,0,24,232,1,0,0,0,26,
		239,1,0,0,0,28,241,1,0,0,0,30,253,1,0,0,0,32,256,1,0,0,0,34,258,1,0,0,
		0,36,267,1,0,0,0,38,269,1,0,0,0,40,280,1,0,0,0,42,297,1,0,0,0,44,308,1,
		0,0,0,46,318,1,0,0,0,48,320,1,0,0,0,50,332,1,0,0,0,52,337,1,0,0,0,54,339,
		1,0,0,0,56,350,1,0,0,0,58,361,1,0,0,0,60,372,1,0,0,0,62,389,1,0,0,0,64,
		391,1,0,0,0,66,393,1,0,0,0,68,395,1,0,0,0,70,406,1,0,0,0,72,414,1,0,0,
		0,74,420,1,0,0,0,76,427,1,0,0,0,78,432,1,0,0,0,80,437,1,0,0,0,82,446,1,
		0,0,0,84,448,1,0,0,0,86,460,1,0,0,0,88,463,1,0,0,0,90,472,1,0,0,0,92,479,
		1,0,0,0,94,483,1,0,0,0,96,489,1,0,0,0,98,497,1,0,0,0,100,499,1,0,0,0,102,
		515,1,0,0,0,104,517,1,0,0,0,106,520,1,0,0,0,108,522,1,0,0,0,110,537,1,
		0,0,0,112,550,1,0,0,0,114,552,1,0,0,0,116,563,1,0,0,0,118,576,1,0,0,0,
		120,583,1,0,0,0,122,585,1,0,0,0,124,591,1,0,0,0,126,598,1,0,0,0,128,605,
		1,0,0,0,130,607,1,0,0,0,132,611,1,0,0,0,134,613,1,0,0,0,136,617,1,0,0,
		0,138,619,1,0,0,0,140,621,1,0,0,0,142,625,1,0,0,0,144,645,1,0,0,0,146,
		647,1,0,0,0,148,662,1,0,0,0,150,664,1,0,0,0,152,668,1,0,0,0,154,679,1,
		0,0,0,156,684,1,0,0,0,158,686,1,0,0,0,160,703,1,0,0,0,162,705,1,0,0,0,
		164,721,1,0,0,0,166,735,1,0,0,0,168,743,1,0,0,0,170,754,1,0,0,0,172,762,
		1,0,0,0,174,773,1,0,0,0,176,177,1,0,0,0,177,1,1,0,0,0,178,184,5,58,0,0,
		179,180,5,47,0,0,180,184,5,58,0,0,181,182,5,42,0,0,182,184,5,58,0,0,183,
		178,1,0,0,0,183,179,1,0,0,0,183,181,1,0,0,0,184,3,1,0,0,0,185,191,5,62,
		0,0,186,187,5,47,0,0,187,191,5,62,0,0,188,189,5,42,0,0,189,191,5,62,0,
		0,190,185,1,0,0,0,190,186,1,0,0,0,190,188,1,0,0,0,191,5,1,0,0,0,192,196,
		3,46,23,0,193,196,3,62,31,0,194,196,3,72,36,0,195,192,1,0,0,0,195,193,
		1,0,0,0,195,194,1,0,0,0,196,7,1,0,0,0,197,198,5,57,0,0,198,9,1,0,0,0,199,
		200,3,8,4,0,200,11,1,0,0,0,201,202,3,46,23,0,202,13,1,0,0,0,203,204,6,
		7,-1,0,204,205,3,12,6,0,205,211,1,0,0,0,206,207,10,1,0,0,207,208,5,28,
		0,0,208,210,3,12,6,0,209,206,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,
		212,1,0,0,0,212,15,1,0,0,0,213,211,1,0,0,0,214,215,5,57,0,0,215,17,1,0,
		0,0,216,217,3,16,8,0,217,218,5,38,0,0,218,219,3,14,7,0,219,220,5,48,0,
		0,220,19,1,0,0,0,221,224,3,10,5,0,222,224,3,18,9,0,223,221,1,0,0,0,223,
		222,1,0,0,0,224,21,1,0,0,0,225,226,5,57,0,0,226,23,1,0,0,0,227,233,5,28,
		0,0,228,229,5,49,0,0,229,230,5,57,0,0,230,231,5,27,0,0,231,233,5,40,0,
		0,232,227,1,0,0,0,232,228,1,0,0,0,233,25,1,0,0,0,234,240,5,63,0,0,235,
		240,3,6,3,0,236,240,3,16,8,0,237,240,3,66,33,0,238,240,3,22,11,0,239,234,
		1,0,0,0,239,235,1,0,0,0,239,236,1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,
		0,240,27,1,0,0,0,241,242,6,14,-1,0,242,243,3,26,13,0,243,250,1,0,0,0,244,
		245,10,1,0,0,245,246,3,24,12,0,246,247,3,26,13,0,247,249,1,0,0,0,248,244,
		1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,29,1,0,0,0,
		252,250,1,0,0,0,253,254,3,22,11,0,254,255,3,120,60,0,255,31,1,0,0,0,256,
		257,7,0,0,0,257,33,1,0,0,0,258,259,7,1,0,0,259,35,1,0,0,0,260,268,5,62,
		0,0,261,268,3,20,10,0,262,268,3,30,15,0,263,264,5,40,0,0,264,265,3,46,
		23,0,265,266,5,49,0,0,266,268,1,0,0,0,267,260,1,0,0,0,267,261,1,0,0,0,
		267,262,1,0,0,0,267,263,1,0,0,0,268,37,1,0,0,0,269,270,6,19,-1,0,270,271,
		3,36,18,0,271,277,1,0,0,0,272,273,10,1,0,0,273,274,5,34,0,0,274,276,3,
		36,18,0,275,272,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,
		0,278,39,1,0,0,0,279,277,1,0,0,0,280,281,6,20,-1,0,281,282,3,38,19,0,282,
		289,1,0,0,0,283,284,10,1,0,0,284,285,3,34,17,0,285,286,3,38,19,0,286,288,
		1,0,0,0,287,283,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,
		0,290,41,1,0,0,0,291,289,1,0,0,0,292,293,6,21,-1,0,293,298,3,40,20,0,294,
		295,3,32,16,0,295,296,3,40,20,0,296,298,1,0,0,0,297,292,1,0,0,0,297,294,
		1,0,0,0,298,305,1,0,0,0,299,300,10,1,0,0,300,301,3,32,16,0,301,302,3,40,
		20,0,302,304,1,0,0,0,303,299,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,
		306,1,0,0,0,306,43,1,0,0,0,307,305,1,0,0,0,308,309,5,11,0,0,309,310,3,
		62,31,0,310,311,5,20,0,0,311,45,1,0,0,0,312,319,3,42,21,0,313,314,3,44,
		22,0,314,315,3,42,21,0,315,316,5,6,0,0,316,317,3,46,23,0,317,319,1,0,0,
		0,318,312,1,0,0,0,318,313,1,0,0,0,319,47,1,0,0,0,320,321,3,42,21,0,321,
		322,5,55,0,0,322,323,3,42,21,0,323,49,1,0,0,0,324,333,5,54,0,0,325,333,
		3,20,10,0,326,333,3,30,15,0,327,333,3,48,24,0,328,329,5,40,0,0,329,330,
		3,62,31,0,330,331,5,49,0,0,331,333,1,0,0,0,332,324,1,0,0,0,332,325,1,0,
		0,0,332,326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,333,51,1,0,0,0,334,
		338,3,50,25,0,335,336,5,45,0,0,336,338,3,50,25,0,337,334,1,0,0,0,337,335,
		1,0,0,0,338,53,1,0,0,0,339,340,6,27,-1,0,340,341,3,52,26,0,341,347,1,0,
		0,0,342,343,10,1,0,0,343,344,5,25,0,0,344,346,3,52,26,0,345,342,1,0,0,
		0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,55,1,0,0,0,349,347,
		1,0,0,0,350,351,6,28,-1,0,351,352,3,54,27,0,352,358,1,0,0,0,353,354,10,
		1,0,0,354,355,5,46,0,0,355,357,3,54,27,0,356,353,1,0,0,0,357,360,1,0,0,
		0,358,356,1,0,0,0,358,359,1,0,0,0,359,57,1,0,0,0,360,358,1,0,0,0,361,362,
		6,29,-1,0,362,363,3,56,28,0,363,369,1,0,0,0,364,365,10,1,0,0,365,366,5,
		37,0,0,366,368,3,56,28,0,367,364,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,
		0,369,370,1,0,0,0,370,59,1,0,0,0,371,369,1,0,0,0,372,373,6,30,-1,0,373,
		374,3,58,29,0,374,380,1,0,0,0,375,376,10,1,0,0,376,377,5,33,0,0,377,379,
		3,58,29,0,378,375,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
		0,0,381,61,1,0,0,0,382,380,1,0,0,0,383,390,3,60,30,0,384,385,3,44,22,0,
		385,386,3,60,30,0,386,387,5,6,0,0,387,388,3,62,31,0,388,390,1,0,0,0,389,
		383,1,0,0,0,389,384,1,0,0,0,390,63,1,0,0,0,391,392,7,2,0,0,392,65,1,0,
		0,0,393,394,5,57,0,0,394,67,1,0,0,0,395,396,3,66,33,0,396,397,5,38,0,0,
		397,398,3,12,6,0,398,399,5,48,0,0,399,69,1,0,0,0,400,407,3,64,32,0,401,
		407,3,68,34,0,402,403,5,40,0,0,403,404,3,72,36,0,404,405,5,49,0,0,405,
		407,1,0,0,0,406,400,1,0,0,0,406,401,1,0,0,0,406,402,1,0,0,0,407,71,1,0,
		0,0,408,415,3,70,35,0,409,410,3,44,22,0,410,411,3,70,35,0,411,412,5,6,
		0,0,412,413,3,72,36,0,413,415,1,0,0,0,414,408,1,0,0,0,414,409,1,0,0,0,
		415,73,1,0,0,0,416,421,3,102,51,0,417,421,3,104,52,0,418,421,3,106,53,
		0,419,421,3,122,61,0,420,416,1,0,0,0,420,417,1,0,0,0,420,418,1,0,0,0,420,
		419,1,0,0,0,421,75,1,0,0,0,422,428,3,74,37,0,423,424,3,64,32,0,424,425,
		5,27,0,0,425,426,3,76,38,0,426,428,1,0,0,0,427,422,1,0,0,0,427,423,1,0,
		0,0,428,77,1,0,0,0,429,433,3,76,38,0,430,433,3,90,45,0,431,433,3,92,46,
		0,432,429,1,0,0,0,432,430,1,0,0,0,432,431,1,0,0,0,433,79,1,0,0,0,434,438,
		3,78,39,0,435,438,3,110,55,0,436,438,3,118,59,0,437,434,1,0,0,0,437,435,
		1,0,0,0,437,436,1,0,0,0,438,81,1,0,0,0,439,440,3,80,40,0,440,441,5,7,0,
		0,441,447,1,0,0,0,442,443,3,80,40,0,443,444,5,50,0,0,444,445,3,82,41,0,
		445,447,1,0,0,0,446,439,1,0,0,0,446,442,1,0,0,0,447,83,1,0,0,0,448,449,
		6,42,-1,0,449,450,5,2,0,0,450,451,3,126,63,0,451,457,1,0,0,0,452,453,10,
		1,0,0,453,454,5,50,0,0,454,456,3,126,63,0,455,452,1,0,0,0,456,459,1,0,
		0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,85,1,0,0,0,459,457,1,0,0,0,460,
		461,5,2,0,0,461,462,3,82,41,0,462,87,1,0,0,0,463,464,3,84,42,0,464,465,
		5,50,0,0,465,466,3,82,41,0,466,89,1,0,0,0,467,473,3,86,43,0,468,469,3,
		64,32,0,469,470,5,27,0,0,470,471,3,90,45,0,471,473,1,0,0,0,472,467,1,0,
		0,0,472,468,1,0,0,0,473,91,1,0,0,0,474,480,3,88,44,0,475,476,3,64,32,0,
		476,477,5,27,0,0,477,478,3,92,46,0,478,480,1,0,0,0,479,474,1,0,0,0,479,
		475,1,0,0,0,480,93,1,0,0,0,481,484,3,92,46,0,482,484,3,90,45,0,483,481,
		1,0,0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,486,5,0,0,1,486,95,1,0,0,0,
		487,490,3,20,10,0,488,490,3,22,11,0,489,487,1,0,0,0,489,488,1,0,0,0,490,
		97,1,0,0,0,491,492,3,20,10,0,492,493,5,26,0,0,493,498,1,0,0,0,494,495,
		3,22,11,0,495,496,5,26,0,0,496,498,1,0,0,0,497,491,1,0,0,0,497,494,1,0,
		0,0,498,99,1,0,0,0,499,500,6,50,-1,0,500,501,3,98,49,0,501,506,1,0,0,0,
		502,503,10,1,0,0,503,505,3,98,49,0,504,502,1,0,0,0,505,508,1,0,0,0,506,
		504,1,0,0,0,506,507,1,0,0,0,507,101,1,0,0,0,508,506,1,0,0,0,509,510,3,
		100,50,0,510,511,3,46,23,0,511,516,1,0,0,0,512,513,3,100,50,0,513,514,
		3,62,31,0,514,516,1,0,0,0,515,509,1,0,0,0,515,512,1,0,0,0,516,103,1,0,
		0,0,517,518,5,10,0,0,518,519,3,72,36,0,519,105,1,0,0,0,520,521,3,0,0,0,
		521,107,1,0,0,0,522,523,3,44,22,0,523,524,3,78,39,0,524,109,1,0,0,0,525,
		538,3,108,54,0,526,527,3,108,54,0,527,528,5,6,0,0,528,529,3,80,40,0,529,
		538,1,0,0,0,530,531,3,44,22,0,531,532,3,118,59,0,532,538,1,0,0,0,533,534,
		3,64,32,0,534,535,5,27,0,0,535,536,3,110,55,0,536,538,1,0,0,0,537,525,
		1,0,0,0,537,526,1,0,0,0,537,530,1,0,0,0,537,533,1,0,0,0,538,111,1,0,0,
		0,539,551,3,46,23,0,540,541,3,46,23,0,541,542,5,17,0,0,542,543,3,46,23,
		0,543,544,5,22,0,0,544,545,3,46,23,0,545,551,1,0,0,0,546,547,3,46,23,0,
		547,548,5,24,0,0,548,549,3,62,31,0,549,551,1,0,0,0,550,539,1,0,0,0,550,
		540,1,0,0,0,550,546,1,0,0,0,551,113,1,0,0,0,552,553,6,57,-1,0,553,554,
		3,112,56,0,554,560,1,0,0,0,555,556,10,1,0,0,556,557,5,28,0,0,557,559,3,
		112,56,0,558,555,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,
		0,561,115,1,0,0,0,562,560,1,0,0,0,563,564,5,9,0,0,564,565,3,20,10,0,565,
		566,5,26,0,0,566,567,3,114,57,0,567,568,5,5,0,0,568,117,1,0,0,0,569,570,
		3,116,58,0,570,571,3,80,40,0,571,577,1,0,0,0,572,573,3,64,32,0,573,574,
		5,27,0,0,574,575,3,118,59,0,575,577,1,0,0,0,576,569,1,0,0,0,576,572,1,
		0,0,0,577,119,1,0,0,0,578,584,3,0,0,0,579,580,5,40,0,0,580,581,3,28,14,
		0,581,582,5,49,0,0,582,584,1,0,0,0,583,578,1,0,0,0,583,579,1,0,0,0,584,
		121,1,0,0,0,585,586,3,22,11,0,586,587,3,120,60,0,587,123,1,0,0,0,588,590,
		9,0,0,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,
		0,592,125,1,0,0,0,593,591,1,0,0,0,594,599,3,134,67,0,595,599,3,150,75,
		0,596,599,3,154,77,0,597,599,3,174,87,0,598,594,1,0,0,0,598,595,1,0,0,
		0,598,596,1,0,0,0,598,597,1,0,0,0,599,127,1,0,0,0,600,606,3,10,5,0,601,
		602,3,10,5,0,602,603,5,28,0,0,603,604,3,128,64,0,604,606,1,0,0,0,605,600,
		1,0,0,0,605,601,1,0,0,0,606,129,1,0,0,0,607,608,7,3,0,0,608,131,1,0,0,
		0,609,612,3,0,0,0,610,612,5,14,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,
		133,1,0,0,0,613,614,3,132,66,0,614,615,3,130,65,0,615,616,3,128,64,0,616,
		135,1,0,0,0,617,618,3,46,23,0,618,137,1,0,0,0,619,620,3,46,23,0,620,139,
		1,0,0,0,621,622,3,136,68,0,622,623,5,27,0,0,623,624,3,138,69,0,624,141,
		1,0,0,0,625,626,6,71,-1,0,626,627,3,140,70,0,627,633,1,0,0,0,628,629,10,
		1,0,0,629,630,5,28,0,0,630,632,3,140,70,0,631,628,1,0,0,0,632,635,1,0,
		0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,143,1,0,0,0,635,633,1,0,0,0,636,
		637,3,16,8,0,637,638,5,38,0,0,638,639,3,142,71,0,639,640,5,48,0,0,640,
		646,1,0,0,0,641,642,3,16,8,0,642,643,5,28,0,0,643,644,3,144,72,0,644,646,
		1,0,0,0,645,636,1,0,0,0,645,641,1,0,0,0,646,145,1,0,0,0,647,648,6,73,-1,
		0,648,649,3,144,72,0,649,655,1,0,0,0,650,651,10,1,0,0,651,652,5,28,0,0,
		652,654,3,144,72,0,653,650,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,
		656,1,0,0,0,656,147,1,0,0,0,657,655,1,0,0,0,658,659,3,130,65,0,659,660,
		5,1,0,0,660,663,1,0,0,0,661,663,5,1,0,0,662,658,1,0,0,0,662,661,1,0,0,
		0,663,149,1,0,0,0,664,665,3,132,66,0,665,666,3,148,74,0,666,667,3,146,
		73,0,667,151,1,0,0,0,668,669,6,76,-1,0,669,670,3,72,36,0,670,676,1,0,0,
		0,671,672,10,1,0,0,672,673,5,28,0,0,673,675,3,72,36,0,674,671,1,0,0,0,
		675,678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,153,1,0,0,0,678,676,
		1,0,0,0,679,680,5,19,0,0,680,681,3,66,33,0,681,682,5,26,0,0,682,683,3,
		152,76,0,683,155,1,0,0,0,684,685,5,57,0,0,685,157,1,0,0,0,686,687,6,79,
		-1,0,687,688,3,156,78,0,688,695,1,0,0,0,689,690,10,1,0,0,690,691,3,24,
		12,0,691,692,3,156,78,0,692,694,1,0,0,0,693,689,1,0,0,0,694,697,1,0,0,
		0,695,693,1,0,0,0,695,696,1,0,0,0,696,159,1,0,0,0,697,695,1,0,0,0,698,
		704,3,0,0,0,699,700,5,40,0,0,700,701,3,158,79,0,701,702,5,49,0,0,702,704,
		1,0,0,0,703,698,1,0,0,0,703,699,1,0,0,0,704,161,1,0,0,0,705,706,6,81,-1,
		0,706,707,5,57,0,0,707,713,1,0,0,0,708,709,10,1,0,0,709,710,5,28,0,0,710,
		712,5,57,0,0,711,708,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,
		0,0,0,714,163,1,0,0,0,715,713,1,0,0,0,716,717,5,23,0,0,717,718,3,162,81,
		0,718,719,5,50,0,0,719,722,1,0,0,0,720,722,3,0,0,0,721,716,1,0,0,0,721,
		720,1,0,0,0,722,165,1,0,0,0,723,736,5,18,0,0,724,736,3,130,65,0,725,736,
		5,1,0,0,726,727,3,130,65,0,727,728,5,1,0,0,728,736,1,0,0,0,729,736,5,13,
		0,0,730,736,5,19,0,0,731,736,5,15,0,0,732,733,3,130,65,0,733,734,5,15,
		0,0,734,736,1,0,0,0,735,723,1,0,0,0,735,724,1,0,0,0,735,725,1,0,0,0,735,
		726,1,0,0,0,735,729,1,0,0,0,735,730,1,0,0,0,735,731,1,0,0,0,735,732,1,
		0,0,0,736,167,1,0,0,0,737,738,6,84,-1,0,738,744,3,0,0,0,739,740,3,166,
		83,0,740,741,3,162,81,0,741,742,5,50,0,0,742,744,1,0,0,0,743,737,1,0,0,
		0,743,739,1,0,0,0,744,751,1,0,0,0,745,746,10,1,0,0,746,747,3,166,83,0,
		747,748,3,162,81,0,748,750,1,0,0,0,749,745,1,0,0,0,750,753,1,0,0,0,751,
		749,1,0,0,0,751,752,1,0,0,0,752,169,1,0,0,0,753,751,1,0,0,0,754,755,3,
		22,11,0,755,756,3,160,80,0,756,757,5,50,0,0,757,758,3,164,82,0,758,759,
		3,168,84,0,759,171,1,0,0,0,760,763,3,80,40,0,761,763,3,124,62,0,762,760,
		1,0,0,0,762,761,1,0,0,0,763,173,1,0,0,0,764,765,5,15,0,0,765,766,3,170,
		85,0,766,767,3,172,86,0,767,774,1,0,0,0,768,769,3,130,65,0,769,770,5,15,
		0,0,770,771,3,170,85,0,771,772,3,172,86,0,772,774,1,0,0,0,773,764,1,0,
		0,0,773,768,1,0,0,0,774,175,1,0,0,0,59,183,190,195,211,223,232,239,250,
		267,277,289,297,305,318,332,337,347,358,369,380,389,406,414,420,427,432,
		437,446,457,472,479,483,489,497,506,515,537,550,560,576,583,591,598,605,
		611,633,645,655,662,676,695,703,713,721,735,743,751,762,773
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
